import{I as r,_ as p}from"./slidev/default-CfCp3xW2.js";import{o as u,c,k as n,e,l as m,ap as l,q as d,s as f,I as o}from"./modules/vue-CxoEfOET.js";import{u as _,f as y}from"./slidev/context-D4KMx6I_.js";import"./monaco/bundled-types-C60bX48a.js";import"./modules/file-saver-igGfcqei.js";import"./index-CuXRtbv1.js";import"./modules/shiki-JPDyeuZ2.js";const R={__name:"slides.md__slidev_7",setup(x){const{$slidev:g,$nav:v,$clicksContext:s,$clicks:$,$page:k,$renderContext:C,$frontmatter:a}=_();return s.setup(),(b,t)=>{const i=p;return u(),c(r,d(f(o(y)(o(a),6))),{default:n(()=>[t[1]||(t[1]=e("h1",null,"Benefits of Conditional Types",-1)),m(i,null,{default:n(()=>t[0]||(t[0]=[e("ul",null,[e("li",null,"Enhanced type flexibility and expressiveness"),e("li",null,"Ability to create more precise and reusable utility types"),e("li",null,"Improved type inference in complex scenarios"),e("li",null,"Enables type-level programming and metaprogramming"),e("li",null,[l("Reduces the need for type assertions and "),e("code",null,"any"),l(" types")]),e("li",null,"Facilitates creation of self-documenting code")],-1)])),_:1})]),_:1},16)}}};export{R as default};
