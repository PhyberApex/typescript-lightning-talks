import{_ as A}from"./slidev/VClick-CbxQvoT7.js";import{_ as u}from"./Monaco.vue_vue_type_style_index_0_lang-BUL6DnKB.js";import{_ as c}from"./slidev/VClicks-2PFwWq5Q.js";import{b as _,o as f,w as e,g as o,e as n,al as r,m as d,v as g,x as B,J as l}from"./modules/vue-X0MnRlWk.js";import{I as Q}from"./slidev/default-D4m-zEKq.js";import{u as C,f as y}from"./slidev/context-B--bAQ9B.js";import"./index-Dsy7OWoF.js";import"./monaco/bundled-types-CzGCyX7H.js";import"./modules/file-saver-BirHVELW.js";import"./modules/shiki--ejbtZLo.js";const M={__name:"slides.md__slidev_5",setup(w){const{$clicksContext:s,$frontmatter:a}=C();return s.setup(),(S,t)=>{const i=c,m=u,p=A;return f(),_(Q,g(B(l(y)(l(a),4))),{default:e(()=>[t[1]||(t[1]=o("h1",null,"Advanced Usage: Inferring Within Conditional Types",-1)),n(i,null,{default:e(()=>t[0]||(t[0]=[o("ul",null,[o("li",null,[r("Use "),o("code",null,"infer"),r(" keyword to infer types within a conditional type")]),o("li",null,"Allows for extracting types from complex structures"),o("li",null,"Useful for creating utility types"),o("li",null,"Can infer return types, parameter types, and more"),o("li",null,"Enables powerful type transformations")],-1)])),_:1}),n(p,null,{default:e(()=>[n(m,d({"code-lz":"C4TwDgpgBAShwFcBOA7AKuCAeNA+KAvFGlBAB7AQoAmAzlABQB0LAhkgOa0BcUrKIANoBdAJSF8ASxQAzCElhQA/It78QAbgBQWmQhQBjYJID2KKByQR4DFKwC2EXrWBJpHUc9fuoAby1QgVBWiKhQAAYAEhAANjEmADRQACS+do4AvgCE4doZOqCQUADiVvBwoeZEFcjomFiFECYyFmXAuNpaBmYuUCgI9gBG8gCCSEisIIRQggCMSQBMSQDMSQAsSQCswtqNUGMTIACiMRCOKMA4+EQk5JQ09AzScgoAqqIiylCvULwoEAA3eS7TBQAByA2GSAOkxOZyowGmMOOp3Ol0azT6kNG40mHR0QA===",lang:"ts"},{}),null,16)]),_:1})]),_:1},16)}}};export{M as default};
