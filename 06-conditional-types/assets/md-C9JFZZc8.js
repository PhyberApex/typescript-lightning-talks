import{_ as A}from"./slidev/VClick-BTzLxgCO.js";import{_ as u}from"./Monaco.vue_vue_type_style_index_0_lang-Bqgoj7_l.js";import{_ as c}from"./slidev/VClicks-Dnv9BeQ5.js";import{o as _,c as f,k as t,e as o,l as n,aj as r,m as d,q as g,s as B,I as l}from"./modules/vue-BH9ZHdUY.js";import{I as C}from"./slidev/default-Ct1sYLak.js";import{u as Q,f as y}from"./slidev/context-6NnEe1Pv.js";import"./index-DYFGg6Zx.js";import"./monaco/bundled-types-D7sXKlnq.js";import"./modules/file-saver-B6SWDYl3.js";import"./modules/shiki-C3aX2284.js";const D={__name:"slides.md__slidev_5",setup(S){const{$slidev:k,$nav:w,$clicksContext:s,$clicks:I,$page:v,$renderContext:x,$frontmatter:a}=Q();return s.setup(),(E,e)=>{const i=c,m=u,p=A;return _(),f(C,g(B(l(y)(l(a),4))),{default:t(()=>[e[1]||(e[1]=o("h1",null,"Advanced Usage: Inferring Within Conditional Types",-1)),n(i,null,{default:t(()=>e[0]||(e[0]=[o("ul",null,[o("li",null,[r("Use "),o("code",null,"infer"),r(" keyword to infer types within a conditional type")]),o("li",null,"Allows for extracting types from complex structures"),o("li",null,"Useful for creating utility types"),o("li",null,"Can infer return types, parameter types, and more"),o("li",null,"Enables powerful type transformations")],-1)])),_:1}),n(p,null,{default:t(()=>[n(m,d({"code-lz":"C4TwDgpgBAShwFcBOA7AKuCAeNA+KAvFGlBAB7AQoAmAzlABQB0LAhkgOa0BcUrKIANoBdAJSF8ASxQAzCElhQA/It78QAbgBQWmQhQBjYJID2KKByQR4DFKwC2EXrWBJpHUc9fuoAby1QgVBWiKhQAAYAEhAANjEmADRQACS+do4AvgCE4doZOqCQUADiVvBwoeZEFcjomFiFECYyFmXAuNpaBmYuUCgI9gBG8gCCSEisIIRQggCMSQBMSQDMSQAsSQCswtqNUGMTIACiMRCOKMA4+EQk5JQ09AzScgoAqqIiylCvULwoEAA3eS7TBQAByA2GSAOkxOZyowGmMOOp3Ol0azT6kNG40mHR0QA===",lang:"ts"},{}),null,16)]),_:1})]),_:1},16)}}};export{D as default};
