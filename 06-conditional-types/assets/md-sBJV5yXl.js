import{_ as m,a as p}from"./Monaco.vue_vue_type_style_index_0_lang-BfNvi9-B.js";import{I as _,_ as d}from"./slidev/default-CfCp3xW2.js";import{o as A,c as f,k as l,e,l as t,ap as o,m as g,q as x,s as B,I as s}from"./modules/vue-CxoEfOET.js";import{u as k,f as Q}from"./slidev/context-D4KMx6I_.js";import"./index-CuXRtbv1.js";import"./monaco/bundled-types-C60bX48a.js";import"./modules/file-saver-igGfcqei.js";import"./modules/shiki-JPDyeuZ2.js";const h={__name:"slides.md__slidev_3",setup(G){const{$slidev:U,$nav:v,$clicksContext:i,$clicks:C,$page:R,$renderContext:T,$frontmatter:a}=k();return i.setup(),(w,n)=>{const r=d,c=m,u=p;return A(),f(_,x(B(s(Q)(s(a),2))),{default:l(()=>[n[1]||(n[1]=e("h1",null,"Basic Syntax of Conditional Types",-1)),t(r,null,{default:l(()=>n[0]||(n[0]=[e("ul",null,[e("li",null,[o("Uses the form: "),e("code",null,"T extends U ? X : Y")]),e("li",null,[e("code",null,"T extends U"),o(" is the condition")]),e("li",null,[o("If "),e("code",null,"T"),o(" is assignable to "),e("code",null,"U"),o(", the type resolves to "),e("code",null,"X")]),e("li",null,[o("Otherwise, it resolves to "),e("code",null,"Y")]),e("li",null,"Can be nested for more complex conditions"),e("li",null,"Often used with generics for maximum flexibility")],-1)])),_:1}),t(u,null,{default:l(()=>[t(c,g({"code-lz":"C4TwDgpgBAcgrgWwEYQE4HlUGVioJYB2A5gDwAqAfFALxRlQQAewEBAJgM5QGIqpQB+brzRQAXFA65CRANwAoeQHolUAKocAhkQjyANhGDCEE+MjSYc+YiR7nUVWgBYATLKgq64aHi52++oaSuKYiGNjSNkgA9tEGmgSOUABEABIQenrRye6eZN5QvsHWRIp5ABZFAO7RcHpsUADGmnAc0JpQoJAMqKjRqGLKqgZGaH0DsGGWkaT+aEnJZJVcVXiZUABmmms5ikA",lang:"ts"},{}),null,16)]),_:1})]),_:1},16)}}};export{h as default};
