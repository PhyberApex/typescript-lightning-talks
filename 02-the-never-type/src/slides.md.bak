---
highlighter: shiki
background: /cover.jpg
css: unocss
colorSchema: dark
mdc: true
lineNumbers: false
info: |
  ## The 'never' Type in TypeScript
  A 5-10 minute introduction to the 'never' type and its applications.
transition: fade-out
title: The 'never' Type in TypeScript
glowSeed: 4
---

# The 'never' Type in TypeScript
Understanding and Leveraging TypeScript's Bottom Type

<!--
- Welcome everyone to this talk on the 'never' type in TypeScript
- We'll explore what this unique type is, why it's useful, and how to use it effectively
- By the end, you'll have a solid understanding of 'never' and its applications in TypeScript
-->

---
q
# What is the 'never' Type?

- TypeScript's bottom type
- Represents the type of values that never occur
- No value is assignable to 'never' (except 'never' itself)

<!--
- The 'never' type is a special type in TypeScript, often called the bottom type
- It represents values that will never occur or computations that do not complete
- It's a type that has no values - you can't assign anything to a 'never' type (except another 'never')
- Understanding 'never' is crucial for advanced type manipulations and control flow analysis
-->

---

# When is 'never' Inferred?

1. Functions that never return (infinite loops, throw errors)
2. Unreachable code branches
3. Exhaustive checks in switch statements or conditional types

<!--
- TypeScript infers 'never' in several situations
- Functions that never return, like those that always throw an error or have infinite loops
- Code branches that should be unreachable, helping catch logical errors
- It's also used in exhaustive checks, ensuring all cases are handled
- Let's look at some examples of these cases
-->

---

# 'never' as Default Array Type

```bash
npx http-server
```

<<< ./snippets/never-array.ts ts {all|1-2|4-5|7-8|all}

<!--
- An interesting aspect of 'never' is its role as the default type of an empty array
- When we declare an empty array without type annotation, TypeScript infers it as never[]
- This makes sense because TypeScript doesn't know what type of elements the array will contain
- As soon as we add an element, TypeScript will infer the correct type
- We can also use type assertions or explicit type annotations to specify the array type
-->

---

# Example: Function That Never Returns

<<< ./snippets/never-function.ts ts {all|1-3|5-7|all}

<!--
- Here we have two functions that never return a value
- throwError always throws an error, so it never completes normally
- infiniteLoop, as the name suggests, runs forever and never returns
- TypeScript infers the return type of both these functions as 'never'
- This helps catch errors if we try to use the "return value" of these functions
-->

---

# Unreachable Code Detection

<<< ./snippets/unreachable-code.ts ts {all|1-7|9-14|all}

<!--
- The 'never' type helps detect unreachable code
- In the first function, TypeScript knows that code after 'throw' is unreachable
- In the second example, the default case should never be reached if we've handled all cases
- If we add a new variant to UserRole without updating the switch, TypeScript will warn us
- This is a powerful way to ensure exhaustiveness in our code
-->

---

# Exhaustive Checks with 'never'

<<< ./snippets/exhaustive-check.ts ts {all|1-3|5-15|17-19|all}

<!--
- Here's a more explicit way to use 'never' for exhaustive checks
- We define a helper function that takes 'never' as an argument
- In our switch statement, we handle all known cases of Shape
- If we've truly handled all cases, the default case will receive a 'never' type
- If we add a new Shape variant without updating the switch, TypeScript will error
- This pattern ensures we don't forget to handle new cases as our types evolve
-->

---

# 'never' in Conditional Types

<<< ./snippets/conditional-never.ts ts {all|1-2|4-5|7-10|all}

<!--
- The 'never' type is also useful in conditional types
- Here, we define a type that extracts array element types
- For arrays, it gives us the element type
- For non-arrays, it gives us 'never'
- This allows us to create powerful type constraints and transformations
- It's particularly useful in advanced type programming scenarios
-->

---

# Use Case: Eliminating Options from a Union

<<< ./snippets/union-elimination.ts ts {all|1-2|4-5|7-8|10-11|all}

<!--
- Here's a practical use case for 'never' in type manipulations
- We start with a union type of possible options
- We then create a type that removes one option from the union
- The 'never' type is key here - it's removed from unions automatically
- This technique is useful for creating derived types or narrowing unions based on conditions
-->

---

# Best Practices with 'never'

1. Use it to mark impossible cases in your domain logic
2. Leverage it for exhaustive checking in switch statements
3. Employ it in advanced type manipulations and conditional types
4. Be cautious of 'any' - it can be assigned to 'never', breaking its guarantees

<!--
- Let's discuss some best practices when working with the 'never' type
- Use it to explicitly mark cases that should be impossible in your business logic
- Leverage it for exhaustive checking, especially in switch statements or discriminated unions
- It's a powerful tool in advanced type manipulations and conditional types
- Be careful with 'any' - it can be assigned to 'never', which can break type safety
-->

---

# Conclusion

- 'never' represents the logically impossible in TypeScript
- It's crucial for advanced type checking and manipulations
- Use it to improve code safety and catch logical errors
- Remember: If you're handling a 'never', something's probably wrong!

<!--
- To wrap up, the 'never' type is a powerful feature in TypeScript
- It represents values or states that should never occur
- It's crucial for advanced type checking, exhaustive switches, and type manipulations
- Using 'never' can significantly improve code safety and catch subtle logical errors
- If you find yourself handling a 'never' type, it's often a sign that you have a logic error
-->

---

# Questions?

Thank you for your attention!

<!--
- Thank you all for your attention!
- I hope this talk has given you a good understanding of the 'never' type and its applications in TypeScript
- Are there any questions? I'd be happy to discuss further or clarify any points.
-->
